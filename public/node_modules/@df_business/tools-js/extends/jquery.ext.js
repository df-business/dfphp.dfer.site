/**
 * +----------------------------------------------------------------------
 * | jq拓展方法
 * | 依赖于jq插件
 * | 需要使用requireJs进行优先加载
 * +----------------------------------------------------------------------
 *                                            ...     .............
 *                                          ..   .:!o&*&&&&&ooooo&; .
 *                                        ..  .!*%*o!;.
 *                                      ..  !*%*!.      ...
 *                                     .  ;$$!.   .....
 *                          ........... .*#&   ...
 *                                     :$$: ...
 *                          .;;;;;;;:::#%      ...
 *                        . *@ooooo&&&#@***&&;.   .
 *                        . *@       .@%.::;&%$*!. . .
 *          ................!@;......$@:      :@@$.
 *                          .@!   ..!@&.:::::::*@@*.:..............
 *        . :!!!!!!!!!!ooooo&@$*%%%*#@&*&&&&&&&*@@$&&&oooooooooooo.
 *        . :!!!!!!!!;;!;;:::@#;::.;@*         *@@o
 *                           @$    &@!.....  .*@@&................
 *          ................:@* .  ##.     .o#@%;
 *                        . &@%..:;@$:;!o&*$#*;  ..
 *                        . ;@@#$$$@#**&o!;:   ..
 *                           :;:: !@;        ..
 *                               ;@*........
 *                       ....   !@* ..
 *                 ......    .!%$! ..     | AUTHOR: dfer
 *         ......        .;o*%*!  .       | EMAIL: df_business@qq.com
 *                .:;;o&***o;.   .        | QQ: 3504725309
 *        .;;!o&****&&o;:.    ..          | WEBSITE: http://www.dfer.site
 * +----------------------------------------------------------------------
 *
 */

////////////////////////////////////////////////// jQuery 本身的扩展方法 START //////////////////////////////////////////////////

jQuery.extend({


    about: function() {
        if (typeof df_tools_common != 'undefined') {
            df_tools_common.log('{0}www.dfer.site'.format('——————>'))
        } else {
            console.log('{0}www.dfer.site'.format('——————>'))
        }
    },
    /**
     * 在网页中加入一个动态消息框
     *
     * 消息框在显示完成之后会自动销毁
     *
     */
    message: function(msg, color = 'white') {
        var delay = 5000;
        var DivC = "message" + (new Date()).valueOf()
        $('body').append('<div class="publicColor ' + DivC +
            '" style="z-index:99999;opacity: 0;position: fixed;right: 15%;top:0%;color:' + color +
            '"></div>');
        var obj = $("." + DivC);
        obj.html(msg);
        obj.animate({
            opacity: 1,
            top: '25%'
        }, delay, 'swing', function() {
            obj.animate({
                opacity: 0,
                top: '50%'
            }, delay, 'linear', function() {
                obj.remove();
            });
        });

    },
    /**
     * 选择表单所有复选框
     * @param {Object} ischecked
     * @param {Object} formid
     */
    checkAll: function(ischecked, formid) {
        if (formid) {
            $("#" + formid + " input[type='checkbox']").attr("checked", ischecked);
        } else {
            $("input[type='checkbox']").attr("checked", ischecked);
        }

    },
    /**
     * 获取表单中复选框的选中数
     * @param {Object} formid
     */
    selectedCount: function(formid) {
        var chks = null;
        var n = 0;
        if (formid) {
            chks = $("#" + formid + " input[type='checkbox']");
        } else {
            chks = $("input[type='checkbox']");
        }
        chks.each(function() {
            if ($(this).get(0).checked) {
                n++;
            }
        });
        return n;
    },
    /**
     * 获取表单中复选框的选中的所有值，用逗号分隔
     * @param {Object} formid
     */
    selecteds: function(formid) {
        var ids = "";
        var chks = null;

        if (formid) {
            chks = $("#" + formid + " input[type='checkbox']");
        } else {
            chks = $("input[type='checkbox']");
        }
        chks.each(function() {
            if ($(this).get(0).checked) {
                if (ids != "") {
                    ids += ",";
                }
                ids += $(this).val();
            }
        });
        return ids;

    },
    /**
     * 获取表单中复选框的所有值，用逗号分隔
     * @param {Object} formid
     */
    allids: function(formid) {
        var ids = "";
        var chks = null;

        if (formid) {
            chks = $("#" + formid + " input[type='checkbox']");
        } else {
            chks = $("input[type='checkbox']");
        }
        chks.each(function() {

            if (ids != "") {
                ids += ",";
            }
            ids += $(this).val();

        });
        return ids;

    },
    /**
     * 取消选中表单中的所有复选框
     * @param {Object} formid
     */
    uncheckAll: function(formid) {
        if (formid) {
            $("#" + formid + " input[type='checkbox']").attr("checked", false);
        } else {
            $("input[type='checkbox']").attr("checked", false);
        }

    },

    /**
     * 输入框为空时，自动用holder属性的值进行填充
     * 
     * @param {Object} objid
     */
    holder: function(objid) {

        var _this = $("#" + objid);
        var placeholder = _this.attr("holder");
        if ($.trim(_this.val()) == "") {
            _this.addClass("placeholder");
            _this.val(placeholder);
        }
        _this.focus(function() {
            if ($.trim(_this.val()) == placeholder) {
                _this.removeClass("placeholder");
                _this.val("");
            }
        }).blur(function() {
            if ($.trim(_this.val()) == "") {
                _this.addClass("placeholder");
                _this.val(placeholder);
            }
        });
    },
    // ********************** 判断字符串内容 START **********************
    isEmail: function(str) {
        return /^(?:\w+\.?)*\w+@(?:\w+\.)+\w+$/.test($.trim(str));
    },
    isIDCard: function(obj) {
        var aCity = {
            11: "北京",
            12: "天津",
            13: "河北",
            14: "山西",
            15: "内蒙古",
            21: "辽宁",
            22: "吉林",
            23: "黑龙 江",
            31: "上海",
            32: "江苏",
            33: "浙江",
            34: "安徽",
            35: "福建",
            36: "江西",
            37: "山东",
            41: "河南",
            42: "湖 北",
            43: "湖南",
            44: "广东",
            45: "广西",
            46: "海南",
            50: "重庆",
            51: "四川",
            52: "贵州",
            53: "云南",
            54: "西 藏",
            61: "陕西",
            62: "甘肃",
            63: "青海",
            64: "宁夏",
            65: "新疆",
            71: "台湾",
            81: "香港",
            82: "澳门",
            91: "国 外"
        };
        var iSum = 0;
        //var info = "";
        var strIDno = obj;
        var idCardLength = strIDno.length;
        if (!/^\d{17}(\d|x)$/i.test(strIDno) && !/^\d{15}$/i.test(strIDno))
            return false; //非法身份证号

        if (aCity[parseInt(strIDno.substr(0, 2))] == null)
            return false; // 非法地区

        // 15位身份证转换为18位
        if (idCardLength == 15) {
            sBirthday = "19" + strIDno.substr(6, 2) + "-" + Number(strIDno.substr(8, 2)) + "-" + Number(
                strIDno.substr(10, 2));
            var d = new Date(sBirthday.replace(/-/g, "/"))
            var dd = d.getFullYear().toString() + "-" + (d.getMonth() + 1) + "-" + d.getDate();
            if (sBirthday != dd)
                return false; //非法生日
            strIDno = strIDno.substring(0, 6) + "19" + strIDno.substring(6, 15);
            strIDno = strIDno + GetVerifyBit(strIDno);
        }

        // 判断是否大于2078年，小于1900年
        var year = strIDno.substring(6, 10);
        if (year < 1900 || year > 2078)
            return false; //非法生日

        //18位身份证处理

        //在后面的运算中x相当于数字10,所以转换成a
        strIDno = strIDno.replace(/x$/i, "a");

        sBirthday = strIDno.substr(6, 4) + "-" + Number(strIDno.substr(10, 2)) + "-" + Number(strIDno
            .substr(12, 2));
        var d = new Date(sBirthday.replace(/-/g, "/"))
        if (sBirthday != (d.getFullYear() + "-" + (d.getMonth() + 1) + "-" + d.getDate()))
            return false; //非法生日
        // 身份证编码规范验证
        for (var i = 17; i >= 0; i--)
            iSum += (Math.pow(2, i) % 11) * parseInt(strIDno.charAt(17 - i), 11);
        if (iSum % 11 != 1)
            return false; // 非法身份证号

        // 判断是否屏蔽身份证
        var words = new Array();
        words = new Array("11111119111111111", "12121219121212121");

        for (var k = 0; k < words.length; k++) {
            if (strIDno.indexOf(words[k]) != -1) {
                return false;
            }
        }

        return true;

    },
    isUrl: function(str) {
        return /^http:\/\/[A-Za-z0-9]+\.[A-Za-z0-9]+[\/=\?%\-&_~`@[\]\':+!]*([^<>\"\"])*$/.test($.trim(
            str));
    },
    isInt: function(str) {
        return /^[-\+]?\d+$/.test($.trim(str));
    },
    isUserID: function(str) {
        return /^\s*[A-Za-z0-9_-]{6,20}\s*$/.test($.trim(str));
    },
    isMobile: function(str) {
        return $.trim(str) !== '' && /^1[3|4|5|7|8][0-9]\d{4,8}$/.test($.trim(str));
    },
    isChinese: function(str) {
        return $.trim(str) != '' & !/[^\u4e00-\u9fa5]/.test($.trim(str));
    },
    isEnglish: function(str) {
        return $.trim(str) != '' & !/[^a-zA-Z]/.test($.trim(str));
    },
    isPassword: function(str) {
        return /^[^\u4e00-\u9fa5\s]{6,20}$/.test($.trim(str));
    },
    isFloat: function(str) {
        return /^(\+|-)?\d+($|\.\d+$)/.test($.trim(str));
    },
    isNumber: function(str) {
        return !$.isEmpty(str) && !isNaN(str);
    },
    //支付宝支付金额验证
    isZfbPrice: function(str) {
        return !$.isEmpty(str) && !isNaN(str) && 0 < str && str <= 100000000;
    },
    isIP: function(str) {
        if (/^(\d+)\.(\d+)\.(\d+)\.(\d+)$/.test($.trim(str))) {
            if (RegExp.$1 < 256 && RegExp.$2 < 256 && RegExp.$3 < 256 && RegExp.$4 < 256)
                return true;
        }
        return false;
    },
    isDate: function(str) {
        var r = $.trim(str).split("-");
        if (r == null)
            return false;
        var d = new Date(r[0], r[1] - 1, r[2]);
        return (d.getFullYear() == r[0] && (d.getMonth() + 1) == r[1] && d.getDate() == r[2]);
    },
    isEmpty: function(str) {
        return $.trim(str) == '' || str == undefined
    },
    // **********************  判断字符串内容 END  **********************

    /**
     * html编码
     * @param {Object} str
     */
    htmlEncode: function(str) {
        str = str.replace(/&/g, '&amp;');
        str = str.replace(/</g, '&lt;');
        str = str.replace(/>/g, '&gt;');
        str = str.replace(/(?:\t| |\v|\r)*\n/g, '<br />');
        str = str.replace(/  /g, '&nbsp; ');
        str = str.replace(/\t/g, '&nbsp; &nbsp; ');
        str = str.replace(/\x22/g, '&quot;');
        str = str.replace(/\x27/g, '&#39;');
        return $.trim(str);
    },
    /**
     * html解码
     * @param {Object} str
     */
    htmlDecode: function(str) {
        str = str.replace(/&amp;/gi, '&');
        str = str.replace(/&nbsp;/gi, ' ');
        str = str.replace(/&quot;/gi, '"');
        str = str.replace(/&#39;/g, "'");
        str = str.replace(/&lt;/gi, '<');
        str = str.replace(/&gt;/gi, '>');
        str = str.replace(/<br[^>]*>(?:(\r\n)|\r|\n)?/gi, '\n');
        return $.trim(str);
    },
    preview: function(str) {
        var testwin = open("");
        testwin.document.open();
        testwin.document.write(str);
        testwin.document.close();
    },
    arrayIndexOf: function(arr, substr, start) {
        var ta, rt, d = '\0';
        if (start != null) {
            ta = arr.slice(start);
            rt = start;
        } else {
            ta = arr;
            rt = 0;
        }
        var str = d + ta.join(d) + d,
            t = str.indexOf(d + substr + d);
        if (t == -1)
            return -1;
        rt += str.slice(0, t).replace(/[^\0]/g, '').length;
        return rt;
    },
    arrayLastIndexOf: function(arr, substr, start) {
        var ta, rt, d = '\0';
        if (start != null) {
            ta = arr.slice(start);
            rt = start;
        } else {
            ta = arr;
            rt = 0;
        }
        ta = ta.reverse();
        var str = d + ta.join(d) + d,
            t = str.indexOf(d + substr + d);
        if (t == -1)
            return -1;
        rt += str.slice(t).replace(/[^\0]/g, '').length - 2;
        return rt;
    },
    // 替换数组中栏目
    arrayReplace: function(arr, reg, rpby) {
        var ta = arr.slice(0),
            d = '\0';
        var str = ta.join(d);
        str = str.replace(reg, rpby);
        return str.split(d);
    },
    // 在数组 arr 中搜索与正则表达式 reg 匹配的元素，并返回该元素在数组中的索引
    arraySearch: function(arr, reg) {
        var ta = arr.slice(0),
            d = '\0',
            str = d + ta.join(d) + d,
            regstr = reg.toString();
        reg = new RegExp(regstr.replace(/\/((.|\n)+)\/.*/g, '\\0$1\\0'), regstr.slice(regstr.lastIndexOf(
            '/') + 1));
        t = str.search(reg);
        if (t == -1)
            return -1;
        return str.slice(0, t).replace(/[^\0]/g, '').length;
    },
    nullundefined: function(str) {},

    /**
     * 文本复制
     * @param {Object} maintext
     */
    setClipboard: function(maintext) {
        if (window.clipboardData) {
            window.clipboardData.setData("Text", maintext);
            alert("复制成功！");
        } else if (window.netscape) {
            try {
                netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
            } catch (e) {
                alert(
                    "被浏览器拒绝！\n请在浏览器地址栏输入'about:config'并回车\n然后将 'signed.applets.codebase_principal_support'设置为'true'"
                );
                return;
            }
            var clip = Components.classes['@mozilla.org/widget/clipboard;1'].createInstance(Components
                .interfaces.nsIClipboard);
            if (!clip)
                return;
            var trans = Components.classes['@mozilla.org/widget/transferable;1'].createInstance(Components
                .interfaces.nsITransferable);
            if (!trans)
                return;
            trans.addDataFlavor('text/unicode');
            var str = new Object();
            var str = Components.classes["@mozilla.org/supports-string;1"].createInstance(Components
                .interfaces.nsISupportsString);
            var copytext = txt;
            str.data = copytext;
            trans.setTransferData("text/unicode", str, copytext.length * 2);
            var clipid = Components.interfaces.nsIClipboard;
            if (!clip)
                return false;
            clip.setData(trans, null, clipid.kGlobalClipboard);
            alert("复制成功！")

        }
    },
    /**
     * 验证表单文本框为空
     * @param {Object} name
     * @param {Object} msg
     */
    formVerifyEmpty: function(name, msg) {
        if (msg == undefined || msg == '')
            msg = '不能为空';
        let div = $(`[name='${name}']`);
        if (div.next('.field-validation-error').length === 0) {
            div.after(`<span class="field-validation-error">${msg}</span>`);
        }

        if (div.val() == "") {
            div.next().html(`${msg}`)
            return true;
        } else {
            div.next().html('')
            return false;
        }
    },

    /**
     * 获取iframe里的元素的值
     * 根据框架Name和元素id获取属性,返回属性值
     * GetIframeEleByName("df","dff","width")
     */
    getIframeEleByName: function(FrameName, ElementId, ElementAttr) {
        var x = $(window.frames[FrameName].document).find("#" + ElementId).attr(ElementAttr);
        if (x == "")
            x = $(window.frames[FrameName].document).find("#" + ElementAttr).find("input")[2].value;
        return x;
    },

    /**
     * 获取框架上级页面元素的属性值
     * @param {Object} ParentElementId
     * @param {Object} ElementAttr
     */
    getParentFrameEleById: function(ParentElementId, ElementAttr) {
        return parent.$('#' + ParentElementId).attr(ElementAttr)
    },

    /**
     * 获取框架上上级页面元素的属性值
     * @param {Object} ParentElementId
     * @param {Object} ElementAttr
     */
    getParentFrameEleById: function(ParentElementId, ElementAttr) {
        return parent.parent.$('#' + ParentElementId).attr(ElementAttr)
    },
    /**
     * 悬浮窗
     * 动态添加div到body
     * @param {Object} id
     * @param {Object} text
     */
    addElementToBody(id, text) {
        $("body").append("<div id='" + id + "'></div>");
        $("#" + id).html(text);
        $("#" + id).setMultiCss({
            "position": "absolute",
            "left": "3px",
            "height": "150px",
            "color": "#ff0000",
            "top": "1px"
        });
    },

    /**
     * 获取框架父级页面的元素
     * @param {Object} id
     */
    getParentEle: function(id) {
        console.log(parent.$("body").contents());
        var frames = parent.$("body").contents();
        frames.find("#" + id);
    },

    /**
     * 获取框架父级页面的元素的值
     * @param {Object} id
     * @param {Object} value
     */
    setParentEleVal(id, value) {
        console.log(parent.$("body").contents());
        var frames = parent.$("body").contents();
        frames.find("#" + id).val(value);
    },

    /**
     * iframe隐藏边框
     */
    iframeShadowBorder() {
        $(function() {
            $("iframe").attr("frameborder", "no");
        })
    },
    /**
     * 同步请求
     * @param {Object} url
     */
    postT: function(url) {
        $.ajax({
            type: "post",
            url: url,
            async: false
        });
    },

    /**
     * 
     * 异步请求
     * action = [function () { top.alert("提现成功"); }, function (json) {if (json.msg == "")top.alert('提现出错'); else top.alert(json.msg);}];
     * action = [function (j) { top.alert(j.msg); }, function (j) { top.alert(j.msg); }]
     */
    postY: function(url, data, action) {
        //默认调用普通异步
        var x = false;
        //详细异步
        if (x) {
            $.ajax({
                url: url,
                data: data,
                dataType: "json",
                type: "POST",
                async: true,
                success: function(json) {
                    if (json.status == 0) {
                        action[0](json);
                    } else {
                        action[1](json);
                    }
                }
            });
        }
        //普通异步
        else {
            $.post(url, data,
                function(json) {
                    json = strToJson(json);
                    if (json.status == 0) {
                        action[0](json);
                    } else {
                        action[1](json);
                    }
                }
            );
        }
    },
    /**
     * 简洁异步传输
     *
     * js
     * var data = { a: 1, b: "1" };
     * action =function (js) { top.alert(js.msg); };
     *
     * c#
     * public JsonResult Url(string a,string b){var json=new df.asp_net.json();json.status =0;return Json(json, JsonRequestBehavior.AllowGet);}
     *
     */
    post: function(url, data, action, log = false) {
        //jquery写法
        $.post(url, data,
            function(x) {
                if (log)
                    console.log(x)
                action(x);
            }
        );
    },
    /**
     * 跨域写法，防止“ Access-Control-Allow-Origin”禁止访问
     * @param {Object} url
     * @param {Object} data
     * @param {Object} action
     */
    postAo: function(url, data, action) {

        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'JSONP',
            data: data, //字符串参数
            success: function(x) {
                //          	x=strToJson(x);
                console.log(x)
                action(x);
            }
        });
    },
    /**
     * 生成浮动的QQ联系窗口、滚动到页面顶端的按钮，可以添加多个类似的浮动窗口
     */
    floatQQ: function() {
        /*自动生成一系列浮动窗口*/
        __BASE__ = "";
        document.write(
            "<style type='text/css'>#full{width:88px; height:383px;}.qq_top{position:absolute; left:-45px; bottom:0}</style>"
        );
        document.write(
            "<div id=\"full\" style='right: 13px;bottom: 95px;position:fixed;z-index:100000000000;'>");
        document.write("<div class=\"qq_top\"> <img src='" + __BASE__ + "/images/float_top.gif'/></div>");
        document.write(
            "<div class=\"qq_info\"><a href='tencent://message/?uin=427729597&Site=&Menu=yes'><img src='" +
            __BASE__ + "/images/float_QQ.jpg' /></a><!-- <a href='#'> <img src='" + __BASE__ +
            "/images/float_WeChat.jpg' /></a>--></div>");

        /*这一段表示的是 文字 和QQ ，如果你要添加N个QQ，就把上面的代码复制N次*/
        document.write("</div>");
        /*如果QQ在线的话，它会自动的变换成亮颜色。如果不在线它会自动变成灰色。这个可以不用控制它。
            所有的样式都在第一个“document.write”里面，可以在里面更改所有的样式。
        */
        $(".qq_top").css("cursor", "default")
        $(".qq_top").click(function() {
            $('body,html').animate({
                scrollTop: 0
            }, 400);
            return false;
        });
    },
    /**
     * 对菜单的当前页面进行加深显示
     */
    menu: function() {
        var url = window.location.href;
        var index = url.lastIndexOf("\/");
        url = url.substring(index + 1, url.length);
        switch (url) {
            case 'xxjs':
                $('#jsddm li').eq(1).css('background', '#0085da');
                break;
            case 'zk':
                $('#jsddm li').eq(2).css('background', '#0085da');
                break;
            case 'cj':
                $('#jsddm li').eq(3).css('background', '#0085da');
                break;
            case 'wj':
                $('#jsddm li').eq(4).css('background', '#0085da');
                break;
            case 'zzyjs':
                $('#jsddm li').eq(5).css('background', '#0085da');
                break;
            case 'lxwm':
                $('#jsddm li').eq(6).css('background', '#0085da');
                break;
            default:
                $('#jsddm li').eq(0).css('background', '#0085da');
                break;
        }
    },

    /**
     *
     * 用画板显示黑客帝国字幕
     *
     * hacker({
     *		style: "position:unset;left:0;top:0;z-index:9",
     *		bottom:false
     *	});
     */
    hacker: function(paras = {}) {
        var chars = '0123456789',
            fontColor = '#0F0',
            style = 'position:fixed;left:0;top:0;z-index:9999999',
            delay = undefined,
            bottom = false;
        if (paras.hasOwnProperty("chars"))
            chars = paras["chars"];
        if (paras.hasOwnProperty("fontColor"))
            fontColor = paras["fontColor"];
        if (paras.hasOwnProperty("style"))
            style = paras["style"];
        if (paras.hasOwnProperty("delay"))
            delay = paras["delay"];
        if (paras.hasOwnProperty("bottom"))
            bottom = paras["bottom"];
        $('html').css('overflow', 'hidden')

        if (bottom)
            $("<canvas>").attr({
                id: "canvas",
                style: style
            }).appendTo("html");
        else
            $("<canvas>").attr({
                id: "canvas",
                style: style
            }).prependTo("html");

        var canvas = document.getElementById('canvas');
        var ctx = canvas.getContext('2d');

        canvas.height = window.innerHeight;
        canvas.width = window.innerWidth;

        var texts = chars.split('');

        var fontSize = 16;
        var columns = canvas.width / fontSize;
        // 用于计算输出文字时坐标，所以长度即为列数
        var drops = [];
        //初始值
        for (var x = 0; x < columns; x++) {
            drops[x] = 1;
        }

        function draw() {
            //让背景逐渐由透明到不透明
            ctx.fillStyle = 'rgba(0, 0, 0, 0.05)';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            //文字颜色
            ctx.fillStyle = fontColor;
            ctx.font = fontSize + 'px arial';
            //逐行输出文字
            for (var i = 0; i < drops.length; i++) {
                var text = texts[Math.floor(Math.random() * texts.length)];
                ctx.fillText(text, i * fontSize, drops[i] * fontSize);

                if (drops[i] * fontSize > canvas.height || Math.random() > 0.95) {
                    drops[i] = 0;
                }

                drops[i]++;
            }
        }

        setInterval(draw, 33);

        function windowSize() {
            //获取屏幕可见区域的实际大小
            width = $(window).width();
            height = $(window).height();
            $("#canvas").css({
                'width': width,
                'height': height
            });
        }
        //窗体大小发生变化时重置容器的尺寸
        $(window).resize(function() {
            windowSize();
        });

        if (delay != undefined) {
            setTimeout(function() {
                $("#canvas").animate({
                        opacity: 0
                    }, delay, 'swing',
                    function() {
                        //必须取消，不然无法正常浏览
                        $('html').css('overflow', 'auto')
                        $("#canvas").remove()
                    });

            })

        }

    },

    /**
     * 输出一些句子
     */
    story: function(msg = "忆经年，小楼初画夜雨寒。枯蝶残梦驻秋千，看落红凌乱。", color = "#00000066") {
        var delay = 3000;
        if (msg.indexOf("。") < 0)
            arr = msg.split("，")
        else
            arr = msg.split("。")

        var num = 0;
        $(function() {

            t = setInterval(function() {
                message(arr[num], color);
                num++;
                if (num > arr.length)
                    clearInterval(t);
            }, delay);

        })
    },

    /**
     * 处理js错误
     * 改写弹窗
     * 文档加载完成之后执行
     *
     * window.onerror = function(msg, url, line, col, error) {
     * console.log(arguments) //打印所有错误信息
     * return false; //屏蔽js自动生成的错误信息
     * }
     */
    layerInit: function() {
        document.write(
            "<script type='text/javascript' src='/assets/layui/layer/layer.js'></script>"); //动态调用js文件
        $(function() {
            window.alert = layer.alert; //改写普通的alert
            //alert(1)
        });
    },
    /**
     * 用于制作菜单
     * 
     * 点击菜单中的一个元素之后，该元素变色，页面主体加载相应的内容
     * 将多个内容简单的页面放到一个页面里通过点击菜单进行加载
     */
    menuClick: function() {
        $(".tab1 span").click(function() {
            $(".tab1 span").css({
                "color": "#666"
            });
            $(this).css({
                "color": "#009ce0"
            });
            var num = $(this).index();
            $(".tabpages1 .tabpage1").hide()
            $(".tabpages1 .tabpage1").eq(num).show();
        });
    },
    /**
     * 定义个对象
     */
    setObject: function() {
        //定义一个对象
        var ObjPanel = {
            ListData: {}, //定义数组
            Clear: function() {
                MemberPanel_Clear();
            }, //定义函数  调用：ObjPanel.Clear();
            IsSanKe: false, //bool变量        //调用:ObjPanel.IsSanKe
            MemState: undefined, //定义模糊变量
            data: {
                Id: 168704,
                CardID: "11",
                CardName: "1234",
                Mobile: "",
                Level: 272
            }, //定义对象  Object {Id: 168704, CardID: "11", CardName: "1234", Mobile: "", Level: 2729…}  //调用:ObjPanel.da.Id
            HideMemberInfoPanel: function() {
                $("#Panel_MemberInfo").css("display", "none");
            } //定义函数
        };
    },
    /**
     * 根据元素名字获取一个元素
     * @param {Object} Ele
     * @param {Object} Name
     */
    finEleByEleAndName: function(Ele, Name) {
        return $(Ele + "[name='" + Name + "']");
    }



});
//////////////////////////////////////////////////  jQuery 本身的扩展方法 END  //////////////////////////////////////////////////





////////////////////////////////////////////////// jQuery 所选对象扩展方法 START //////////////////////////////////////////////////
$.fn.extend({

    about: function() {
        $.about();
    },

    /**
     * 获取元素下某一个元素
     * @param {Object} num  从0开始
     */
    finEleByIdAndNum: function(num) {
        return this.children().eq(num);
    },

    /**
     * 输出被 jQuery 选择器匹配的元素的数量
     */
    getEleCountByEle: function() {
        // jquery-3.1.1将一些方法进行了修改
        return this.size();
    },

    /**
     * 显示中国省市区的js单选下拉框
     * 获取当前下拉框选择的地址——0：获取省；1：获取市
     * 
     * http://sc.chinaz.com/jiaobendemo.aspx?downloadid=0201630750211
     * <script src="/js/jquery-3.1.1.min.js" type="text/javascript"></script> //需要引用的jquery版本在“jQuery v1.11.0”之上
     * <link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css" rel="stylesheet">
     * <script src="/js/全国各地区.js"></script>
     * <div id="distpicker">
     * <select></select>
     * <select></select>
     * <select></select>
     * </div>
     * @param {Object} num
     */
    findZhPCA: function(num) {
        return this.children().eq(num).val();
    },

    /**
     * 一个支持多选的下拉框
     * http://www.cnblogs.com/liuxiaobo93/p/5112993.html
     * http://select2.github.io/examples.html#data
     * 获取下拉框选择的项的编号
     * <script type="text/javascript" src="js/jquery-3.1.1.min.js"></script>
     * <link href="css/select2.css" type="text/css" rel="stylesheet" />
     * <script type="text/javascript" src="js/select2.full.js"></script>
     * <select class="df-select" multiple="multiple" style="width: 75%">
     * </select>
     * <script type="text/javascript">
     * var data = [{ id: 0, text: 'enhancement' }, { id: 1, text: 'bug' }, { id: 2, text: 'duplicate' }, { id: 3, text: 'invalid' }, { id: 4, text: 'wontfix' }];
     * $(".df-select").select2({data:data});
     * </script>
     */
    selectNumCheckbox: function() {
        return this.val(); //获取项的内容
        //$(".df-select").select2().val([0,1,2]).trigger("change");   //添加项到输入框
        //$(".df-select").select2().val(['东城区','朝阳区']).trigger("change");
        //console.log($(".df-select").select2().val());    //输出项的名字
    },

    /**
     * 获取下拉框选择的项
     */
    selectDataCheckbox: function() {
        return this.select2("data");
    },

    /**
     * 支持多选的中国省市区下拉框
     * <form method="post" action='@(ViewBag.Id > 0 ? "/Sys/Master/Edit" : "/Sys/Master/Create")'>
     * <td colspan="3" id="distpicker">
     * <select style="width:22%;height:25px" name="sg"></select>
     * <select style="width:22%;height:25px" name="si"></select>
     * <select class="df-select" multiple="multiple" style="width:22%;"></select>
     * <input name="qu" style="display:none" />
     * </td>
     * </form>
     */
    mulCheckChinaPlace: function() {
        qu = $('.df-select').selectNumCheckbox();
        FinEleByEleAndName("input", "qu").val(qu);
        var Ccc = $('form').serializeObject();
        $.post($('form').attr('action'), Ccc, function(data) {})
    },

    /**
     * 表单加载
     * 
     * <form id ="SystemSetup_form"
     * Models.Info data = db.info.SingleOrDefault<Models.Info>(p => p.id == id); //linq
     * ViewBag.data=new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(data);    //data是数据库的模型类，通过linq获取数据库的单条数据
     * Data=@Html.Raw(ViewBag.data)
     * formLoad('SystemSetup_form', Data);
     * formLoad('SystemSetup_form', Data,'img');
     * 支持input和select，将单条数据库的数据加载到form里
     */
    formLoad: function(Data, Type) {
        if (Type == undefined || Type == "")
            Type = "input";
        //应该在网页加载完全之后给元素赋值
        $(function() {
            var f = this;
            switch (Type) {
                case "input":
                    for (var i in Data) {
                        var isexit = false;
                        var el = f.find("input[name='" + i + "']");
                        if (el && el.attr('type') === 'text') { //<input
                            el.val(Data[i]);
                            isexit = true;
                        } else if (el && el.attr('type') === 'radio') { //<input
                            el.each(function() {
                                if ($(this).val() == Data[i]) {
                                    $(this).attr("checked", true);
                                    isexit = true;
                                    return;
                                }
                            });
                        } else if (el && el.attr('type') === 'checkbox') { //<input
                            if (Data[i]) {
                                el.attr("checked", true);
                                isexit = true;
                            } else {
                                el.attr("checked", false);
                                isexit = true;
                            }
                        } else if (el && el.attr('type') == undefined) { //<input
                            el.val(Data[i]);
                            isexit = true;
                        }
                        if (!isexit) {
                            //<select
                            var els = f.find("#" + i + "");
                            if (els) {
                                els.setValue(Data[i]);
                            }
                        }
                    }
                    break;
                case "img":
                    for (var i in Data) {
                        var els = f.find("#" + i + "");
                        if (els) {
                            els.attr("src", Data[i]);
                        }
                    }
                    break;
                default:
            }
        })
    },

    /**
     * 运行frame里的函数（frame里的函数会在所处的frame的环境里运行）
     */
    runFrameFunctionById: function(action, param) {
        //在iframe加载完毕后执行
        this.onload = function() {
            //调用框架内的函数
            $(this).contentWindow.action(param);
        }
    },

    /**
     * 异步传递form
     * eg:
     * public JsonResult Url(string a,string b){var json=new df.asp_net.json();json.status =0;return Json(json, JsonRequestBehavior.AllowGet);}
     * @param {Object} url
     * @param {Object} action
     */
    urlPostForm: function(url, action) {
        var data = this.serialize();
        $.post(url, data,
            function(json) {
                console.log(json);
                if (json.status == 0) {
                    action[0](json);
                } else {
                    action[1](json);
                }
            }
        );
    },

    /**
     * 倒计时组件
     * http://www.open-open.com/lib/view/open1418096000808.html
     * <script type="text/javascript" src="/js/timer.jquery.js"></script>
     * <div id="df" style="display:none"/>
     */
    timer: function(action) {
        //start a timer & execute a function in 5 minutes & 30 seconds
        this.timer({
            duration: '3s',
            callback: function() {
                action();
                console.log("-------------");
            },
            repeat: true
        });
    },

    /**
     * http://www.w3school.com.cn/jquery/event_change.asp
     * 当元素的值发生改变时，会发生 change 事件。
     * 该事件仅适用于文本域（text field），以及 textarea 和 select 元素
     * FindChangeById("RoleId", function () {  console.log($('#RoleId').val());});
     */
    findChangeById: function(action) {
        this.change(action);
    },

    /**
     * 获取一个元素指定属性的值
     * <div id="GoodsClass"  url="/Goods/GoodsList/GetClass" style="width: 200px; z-index: 506;" relvalue="3636"></div>
     */
    getName: function() {
        this.attr("name");
    },

    /**
     * 鼠标移入、移出某个控件控制元素显示、隐藏
     * @param {Object} scareId 移动范围
     */
    mouseEvent: function(scareId) {
        $(function() {
            $(`#${scareId}`).hover(
                //鼠标移入
                function() {
                    console.log("```");
                    //$(this).show();
                    this.show();
                },
                //鼠标移出
                function() {
                    //  $(this).hide();
                    this.hide()
                });
        })
    },

    /**
     * 批量设置元素内容的显示长度，并且将元素内容添加到title属性
     * @param {Object} len  内容长度
     */
    setEleLenAndTitle(len) {
        $(function() {
            //获取一个元素集合
            this.each(function() {
                $(this).attr("title", $(this).html());
                var eleLen = $(this).html().length;
                if (eleLen > len)
                    $(this).html($(this).html().substr(0, len));
                //alert(EleLen);
            })
        })
    },

    /**
     * 根据屏幕尺寸隐藏元素
     * 屏幕低于指定宽度就隐藏此元素
     * @param {Object} maxwidth
     */
    shadowEleByScreenScale(maxwidth) {
        // $(document.body).width();
        var _sw = $(window).width();
        var _sh = $(window).height() - 100;
        if (_sw < maxwidth) {
            this.hide();
        }
    },

    /**
     * 设置元素内所有a标签的链接地址失效
     * @param {Object} Ele
     */
    setHrefNull: function() {
        $(function() {
            var a = this.find("a");
            for (var i = 0; i < a.length; i++) {
                // if ((i + 1) % 4 != 0)
                a[i].href = "javascript:;";
            }
        })
    },

    /**
     * 使元素获得焦点
     * @param {Object} id
     */
    focusEle: function() {
        $(this)[0].focus()
    },

    /**
     * 根据框架id和元素id获取属性,返回属性值
     * @param {Object} FrameId
     * @param {Object} ElementId
     * @param {Object} ElementAttr
     */
    getIframeEleById: function(ElementId, ElementAttr) {
        this.load(function() {
            return this.contents().find("#" + ElementId).attr(
                ElementAttr)
            //$("#" + FrameId).contents() 获取指定元素的内容
            //相当于 return $("#" + FrameId).find("#" + ElementId).attr(ElementAttr)
            //元素后面可以接contents，而contents后面只能接find
        });
    },

    /**
     * 设置iframe路径
     * <div id="baidumap" style="width:400px;height:500px;display:none;"><iframe style="display:block;margin:0 auto; width:300px;height:500px;" frameborder="0"></iframe> </div>
     */
    setFrameSrc: function(src) {
        // 设置frame的属性
        this.find('iframe').attr('src', src);
        this.show();
    },

    /**
     * 在frame加载完成之后，自动根据frame里的内容的大小设置高度,跟本体页面完美结合
     * <iframe src="/Setup/Shop/ShopEdit?id=0&Mid=2261" id="df" name="df" style="width:100%;"></iframe>
     */
    setFrameHeight: function() {
        // 在iframe加载完毕后执行
        this.onload = function() {
            // 获取Iframe内容的高度
            var mainheight = $(this).contents().height() + 30;
            // 设置Iframe高度
            $(this).height(mainheight);
        }
    },

    /**
     * 设置元素的高度，不赋值高度则获取元素的内容变换高度
     * @param {Object} mainheight
     */
    setEleHeight: function(mainheight) {
        if (mainheight == undefined || mainheight == "" || mainheight == null)
            var mainheight = this.contents().height() + 1;
        this.height(mainheight);
    },

    /**
     * 框架加载状态
     */
    isLoadFrame: function() {
        var x = false;
        this.load(function() {
            x = true;
        });
        return true;
    },



    /**
     * 获取框架里的某个元素
     * @param {Object} FrameId
     * @param {Object} EleId
     */
    setFrameEle: function(EleId) {
        this.load(function() {
            return this.contents().find("#" + EleId);
        });
    },

    /**
     * 禁用框架里的元素
     * @param {Object} FrameId
     * @param {Object} Ele
     */
    disableFrameEle: function(Ele) {
        this.load(function() {
            this.contents().find(Ele).attr("disabled", true);
        });
    },

    /**
     * 隐藏一个元素
     */
    displayNone: function() {
        this.css("display", "none");
    },

    /**
     * 禁用一个元素
     * 例如：
     * $("button").disabled();
     */
    disabled: function(Target) {
        this.attr("disabled", "true");
    },

    /**
     * 设置元素的属性
     * $("input").setAttr("readonly", "true");
     */
    setAttr: function(name, value) {
        this.attr(name, value);
    },

    /**
     * 获取元素的属性
     * $("input").getAttr("disabled")
     */
    getAttr: function(name) {
        return this.attr(name);
    },

    /**
     * 移除元素的属性
     * $("input").delAttr("disabled")
     */
    delAttr: function(name) {
        this.removeAttr(name);
    },

    /**
     * 删除一个子元素
     * $("input").delElement(3)
     */
    delElement: function(num) {
        $(this)[num].remove();
    },

    /**
     * 设置元素的单个样式
     *
     * $("input").setCss("display", "none")
     */
    setCss: function(name, value) {
        this.css(name, value);
    },

    /**
     * 批量设置元素的样式
     * @param {Object} Attr 属性。例如：{ "font-size": "8px", "background-color": "#8888888" }
     */
    setMultiCss: function(Attr) {
        this.css(Attr);
    },

    /**
     * 获取元素的样式
     */
    getCss: function(name) {
        return this.css(name);
    },

    iframeInfo: function(EleId) {
        //top代表多层Iframe里面最上面的一层
        console.log(top.$(this)); //获取顶层页面下的某个元素
        console.log(top.$(this).find("iframe")[0]); //获取第一个Iframe  //属于document，而document后面只能接contentWindow
        console.log(top.$(this).find("iframe")[0]
            .contentWindow); //获取Iframe内容里的元素的集合，contentWindow后面可以接具体的元素
        console.log(top.$(this).find("iframe")[0].contentWindow.$("#" + EleId)); //获取Iframe里某个特定的元素
    },

    /**
     * 点击事件函数
     * @param {Object} action   函数
     */
    clickAction: function(action) {
        this.click(action())
    },

    /**
     * change
     * @param {Object} id
     * @param {Object} action
     */
    textChange: function(id, action) {
        this.change(action)
    },

    /**
     * keypress
     * @param {Object} id
     * @param {Object} action
     */
    keyPress: function(action) {
        this.keypress(function(e) {
            var keyAscii = window.event ? e.keyCode : e.which;
            if (keyAscii == 13) {
                action
            }
        });
    },

    /**
     * keyup
     * @param {Object} id
     * @param {Object} action
     */
    keyUp(action) {
        this.keyup(
            action
        );
    },



    /**
     * 拖拽方法
     * ojb可以被拖动
     * 原理：标记拖曳状态dragging ,坐标位置iX, iY
     * mousedown:fn(){dragging = true, 记录起始坐标位置，设置鼠标捕获}
     * mouseover:fn(){判断如果dragging = true, 则当前坐标位置 - 记录起始坐标位置，绝对定位的元素获得差值}
     * mouseup:fn(){dragging = false, 释放鼠标捕获，防止冒泡}
     * eg:    
     * $('#modal1').drag();
     * @param {Object} dragAreaLimit    为true时，只允许classname为move的区域接受拖动
     */
    drag: function(dragAreaLimit = false) {
        var obj = this;
        var dragging = false;
        var iX, iY;
        //	console.log(obj)
        if (obj.on == undefined) return;
        obj.on('mousedown', function(e) {

            var clickName = e.target.className;
            // console.log(clickName)
            if (dragAreaLimit & clickName != 'move') {
                log('只允许classname为move的区域接受拖动')
                return

            }
            dragging = true;
            iX = e.clientX - this.offsetLeft;
            iY = e.clientY - this.offsetTop;
            this.setCapture && this.setCapture();
            return false;
        });
        document.onmousemove = function(e) {
            //		console.log(dragging)
            if (dragging) {
                var e = e || window.event;
                var oX = e.clientX - iX;
                var oY = e.clientY - iY;
                obj.css({
                    "position": "fixed",
                    "left": oX + "px",
                    "top": oY + "px"
                });
                return false;
            }
        };
        $(document).mouseup(function(e) {
            dragging = false;
            //			obj[0].releaseCapture();
            e.cancelBubble = true;
        })
        return true;
    },

    /**
     * 清空obj的内容
     */
    clear: function() {
        this.html('');
        this.val('');
        this.text('');
        return true;
    },

    /**
     * 给obj设置important的样式
     * @param {Object} name
     * @param {Object} css
     */
    setImportant: function(name, css) {
        this.css(name, css + ' !important')
    },

    // ********************** 判断值类型 START **********************
    isInt: function() {
        return $.isInt($(this).val());
    },
    isIDCard: function() {
        return $.isIDCard($(this).val());
    },
    isEnglish: function() {
        return $.isEnglish($(this).val());
    },
    isEmail: function() {
        return $.isEmail($(this).val());
    },
    isDate: function() {
        return $.isDate($(this).val());
    },
    isIP: function() {
        return $.isIP($(this).val());
    },
    isChinese: function() {
        return $.isChinese($(this).val());
    },
    isEmpty: function() {
        return $.isEmpty($(this).val());
    },
    isUrl: function() {
        return $.isUrl($(this).val());
    },
    isFloat: function() {
        return $.isFloat($(this).val());
    },
    isNumber: function() {
        return $.isNumber($(this).val());
    },
    isUserID: function() {
        return $.isUserID($(this).val());
    },
    isPassword: function() {
        return $.isPassword($(this).val());
    },
    isMobile: function() {
        return $.isMobile($(this).val());
    },
    // **********************  判断值类型 END  **********************

    len: function() {
        return $(this).val().length;
    },
    checked: function() {
        return $(this).get(0).checked();
    },
    resizeImage: function(iwidth, iheight) {

        var w = $(this).width();
        var h = $(this).height();
        var _img = new Image();
        _img.src = $(this).attr("src");
        if (_img.width > _img.height) {
            h = (_img.height / _img.width) * w;
            w = (_img.width > iwidth) ? iwidth : _img.width;

        } else if (_img.width < _img.height) {
            w = (_img.width / _img.height) * h;
            h = (_img.height > iheight) ? iheight : _img.height;

        } else {
            h = (_img.height > iheight) ? iheight : _img.height;
            w = (_img.width > iwidth) ? iwidth : _img.width;
        }
        $(this).css({
            width: w + "px",
            height: h + "px"
        });
    },
    breakWords: function(width) {
        var _this = $(this);
        var content = _this.html();

        if (content == undefined) {
            return;
        }
        if (content.length <= width) {
            _this.html(content);
        } else {
            var str = '';

            for (var i = 0; i < content.length; i++) {
                if (i % width != 0) {
                    str += content.substr(i, 1);

                } else {
                    if (i != 0) {
                        str += "<br/>" + content.substr(i, 1);
                    }
                }
            }

            _this.html(str);
        }

    },
    limitWidth: function() {
        var _this = $(this);
        var elments = _this.getElementsByTagName("*");
        for (var i = 0; i < elments.length; i++) {
            if (parseInt(elments[i].getAttribute("width")) > width) {
                elments[i].setAttribute("width", width - 1);
            }
            if (elments[i].style.width) {
                if (parseInt(elments[i].style.width) > width) {
                    elments[i].style.width = width - 1;
                }
            }
        }
        return _this;
    },
    /**
     * 限制一个文本区域（textarea）的字符长度，并在另一个元素（可能是输入框或某个HTML元素）中显示剩余的字符数
     * @param {Object} num  字符长度
     * @param {Object} inputID  显示剩余的字符数的元素
     * @param {Object} isInput  元素是文本框
     */
    limitLength: function(num, inputID, isInput) {

        var textarea = $(this);

        var input = null;
        if (inputID) {
            input = $("#" + inputID);
        }
        if (input) {
            isInput ? input.val(num - textarea.len()) : input.html(num - textarea.len());
        }

        function limit(textarea, num) {
            if (textarea.len() >= num) {
                textarea.val(textarea.val().substring(0, num));
            } else {
                if (input) {
                    isInput ? input.val(num - textarea.len()) : input.html(num - textarea.len());
                }
            }
        }
        textarea.keypress(function(e) {
            limit($(this), num);
        }).keyup(function(e) {
            limit($(this), num);
        }).mouseup(function(e) {
            limit($(this), num);
        });
        return textarea;
    },
    nulldefined: function() {},

    "placeholder": function(options) {
        options = $.extend({
            placeholderColor: '#aaa',
            isUseSpan: true, //是否使用插入span标签模拟placeholder的方式,默认false,默认使用value模拟
            onInput: true //使用标签模拟(isUseSpan为true)时，是否绑定onInput事件取代focus/blur事件
        }, options);

        $(this).each(function() {
            var _this = this;
            var supportPlaceholder = 'placeholder' in document.createElement('input');
            if (!supportPlaceholder) {
                var defaultValue = $(_this).attr('placeholder');
                if (!defaultValue) {
                    return;
                }

                var defaultColor = $(_this).css('color');
                if (!options.isUseSpan) {

                    $(_this).focus(function() {
                        var pattern = new RegExp("^" + defaultValue + "$|^$");
                        pattern.test($(_this).val()) && $(_this).val('').css('color',
                            defaultColor);
                    }).blur(function() {
                        if ($(_this).val() == defaultValue) {
                            $(_this).css('color', defaultColor);
                        } else if ($(_this).val().length == 0) {
                            $(_this).val(defaultValue).css('color', options
                                .placeholderColor)
                        }
                    }).trigger('blur');
                } else {
                    var $imitate = $(
                        '<span class="wrap-placeholder" style="position:absolute; display:inline-block; overflow:hidden; color:' +
                        options.placeholderColor + '; width:' + $(_this).outerWidth() +
                        'px; height:' + $(_this).outerHeight() + 'px;">' + defaultValue +
                        '</span>');
                    $imitate.css({
                        'margin-left': $(_this).css('margin-left'),
                        'margin-top': $(_this).css('margin-top'),
                        'font-size': $(_this).css('font-size'),
                        'font-family': $(_this).css('font-family'),
                        'font-weight': $(_this).css('font-weight'),
                        'padding-left': parseInt($(_this).css('padding-left')) + 2 + 'px',
                        'line-height': _this.nodeName.toLowerCase() == 'textarea' ? $(_this)
                            .css('line-weight') : $(_this).outerHeight() + 'px',
                        'padding-top': _this.nodeName.toLowerCase() == 'textarea' ?
                            parseInt($(_this).css('padding-top')) + 2 : 0,
                        "left": $(_this).position().left + "px",
                        "top": $(_this).position().top + "px"

                    });
                    $(_this).before($imitate.click(function() {
                        $(_this).trigger('focus');
                    }));

                    $(_this).val().length != 0 && $imitate.hide();

                    if (!options.onInput) {
                        //绑定oninput/onpropertychange事件
                        var inputChangeEvent = typeof(_this.oninput) == 'object' ? 'input' :
                            'propertychange';
                        $(_this).bind(inputChangeEvent, function() {
                            $imitate[0].style.display = $(_this).val().length != 0 ?
                                'none' : 'inline-block';
                        });
                    } else {
                        $(_this).focus(function() {
                            $imitate.hide();
                        }).blur(function() {
                            /^$/.test($(_this).val()) && $imitate.show();
                        });
                    }
                }
            }
        });
        return this;
    },

    "initSelect": function(options) {
        options = $.extend({
            debug: false,
            maxlength: 10
        }, options);

        $(this).each(function() {
            var _input = $(this);
            var _div = $("#" + $(this).attr("id") + "_div");
            var _ul = $("#" + $(this).attr("id") + "_ul");
            _div.mouseenter(function() {
                _ul.show();
            }).mouseleave(function() {
                _ul.hide();
            });
            var txt = "";
            var val = _input.val();

            $("li", _ul).each(function() {

                var item = $(this);
                if (item.attr("val") == val) {
                    $("span", $(".selected", _div)).html(item.attr("text").substr(0, options
                        .maxlength));
                }

                if (item.attr("haschild") == "true") {

                    var _cul = $("#" + _input.attr("id") + "_" + item.attr("val") + "_ul");
                    item.mouseenter(function() {
                        _cul.show();
                    }).mouseleave(function() {
                        _cul.hide();
                    });
                }
            }).click(function(ev) {
                var txt1 = $(this).attr("text");
                var val1 = $(this).attr("val");

                $("ul", _div).hide();
                _input.val(val1);
                $("span", $(".selected", _div)).html(txt1.substr(0, options.maxlength));
                ev.stopPropagation();
            });;

        });
        return this;
    }

})
//////////////////////////////////////////////////  jQuery 所选对象扩展方法 END  //////////////////////////////////////////////////

console.log("DfTools", "jQuery拓展", "加载完成");
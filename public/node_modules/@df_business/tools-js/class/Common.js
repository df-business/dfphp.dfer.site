/**
 * +----------------------------------------------------------------------
 * | 常用的方法
 * +----------------------------------------------------------------------
 *                                            ...     .............
 *                                          ..   .:!o&*&&&&&ooooo&; .
 *                                        ..  .!*%*o!;.
 *                                      ..  !*%*!.      ...
 *                                     .  ;$$!.   .....
 *                          ........... .*#&   ...
 *                                     :$$: ...
 *                          .;;;;;;;:::#%      ...
 *                        . *@ooooo&&&#@***&&;.   .
 *                        . *@       .@%.::;&%$*!. . .
 *          ................!@;......$@:      :@@$.
 *                          .@!   ..!@&.:::::::*@@*.:..............
 *        . :!!!!!!!!!!ooooo&@$*%%%*#@&*&&&&&&&*@@$&&&oooooooooooo.
 *        . :!!!!!!!!;;!;;:::@#;::.;@*         *@@o
 *                           @$    &@!.....  .*@@&................
 *          ................:@* .  ##.     .o#@%;
 *                        . &@%..:;@$:;!o&*$#*;  ..
 *                        . ;@@#$$$@#**&o!;:   ..
 *                           :;:: !@;        ..
 *                               ;@*........
 *                       ....   !@* ..
 *                 ......    .!%$! ..     | AUTHOR: dfer
 *         ......        .;o*%*!  .       | EMAIL: df_business@qq.com
 *                .:;;o&***o;.   .        | QQ: 3504725309
 *        .;;!o&****&&o;:.    ..          | WEBSITE: http://www.dfer.site
 * +----------------------------------------------------------------------
 *
 */
class Common {

    constructor() {
        console.log("DfTools", "常用的方法", "加载完成");
        this.about();
    }

    about() {
        this.log('★★★★★★★★★★★★★Dfer.Site★★★★★★★★★★★★★', ['white', 'red'], 13);
        this.log(["QQ", ":", "3504725309"], ["red", "#00aaff", "#aa007f"]);
        this.log(["网址", ":", "http://www.dfer.site"], ["red", "#00aaff", "#aa007f"]);
        this.log('★★★★★★★★★★★★★Dfer.Site★★★★★★★★★★★★★', ['white', 'red'], 13);
    }

    /**
     * 跳转到一个新页面
     * @param {Object} url  地址
     * @param {Object} is_blank 跳到新标签
     */
    toUrl(url, is_blank = false) {
        if (is_blank) {
            window.open(url);
        } else {
            location.href = url;
        }
    }

    /**
     * 获取url参数
     * @param {Object} name
     */
    getUrlParam(name) {
        var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)");
        var r = window.location.search.substr(1).match(reg);
        if (r != null) return decodeURI(r[2]);
        return null;
    }

    /**
     * 是微信环境
     */
    isWeixin() {
        //获取浏览器标识符
        var ua = navigator.userAgent.toLowerCase();
        //微信内置浏览器
        if (ua.indexOf('micromessenger') > 0) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * 判断是否为手机端
     */
    isPhone() {
        var ua = navigator.userAgent,
            isWindowsPhone = /(?:Windows Phone)/.test(ua),
            isSymbian = /(?:SymbianOS)/.test(ua) || isWindowsPhone,
            isAndroid = /(?:Android)/.test(ua),
            isFireFox = /(?:Firefox)/.test(ua),
            isChrome = /(?:Chrome|CriOS)/.test(ua),
            isTablet = /(?:iPad|PlayBook)/.test(ua) || (isAndroid && !/(?:Mobile)/.test(ua)) || (isFireFox &&
                /(?:Tablet)/.test(ua)),
            isPhone = /(?:iPhone)/.test(ua) && !isTablet,
            isPc = !isPhone && !isAndroid && !isSymbian;
        if (isAndroid || isPhone) {
            return true;
        }
        return false;
    }

    /**
     * 阻止查看源码
     */
    protectPage() {
        function stop() {
            return false;
        }
        document.oncontextmenu = stop;
        document.ondragstart = stop;
    }


    /**
     * 
     * 需要引入clipboard插件
     * <script src="/assets/clipboard.min.js"></script>
     * 复制字符串到剪贴板
     *  <button class="btn" data-clipboard-text="1">Copy</button>
     *  copyTxt('.btn')
     * 需要触发obj的点击事件
     *
     * https://github.com/zenorocha/clipboard.js
     */
    copyTxt(str, obj = null, id = null) {
        if (obj != null)
            var clipboard = new obj(str, {
                container: document.getElementById(id)
            });
        else
            var clipboard = new ClipboardJS(str);

        clipboard.on('success', function(e) {
            console.log(e);
            alert('复制成功')
        });

        clipboard.on('error', function(e) {
            console.log('err', e);
        });

    }

    /**
     * 原生动态加载js文件
     * @param {Object} url
     * @param {Object} callback
     */
    loadJs(url, callback) {
        var script = document.createElement('script');
        script.type = "text/javascript";
        if (typeof(callback) != "undefined") {
            if (script.readyState) {
                script.onreadystatechange = function() {
                    if (script.readyState == "loaded" || script.readyState == "complete") {
                        script.onreadystatechange = null;
                        callback();
                    }
                }
            } else {
                script.onload = function() {
                    callback();
                }
            }
        }
        script.src = url;
        document.body.appendChild(script);
    }

    /**
     * 获取对象类型
     * @param {Object} obj
     */
    type(obj) {
        return typeof(obj);
    }

    /**
     * 判断对象是否不存在或者未赋值或者为空
     * @param {Object} obj
     */
    empty(obj) {
        if (typeof obj == 'undefined' || obj == undefined || obj == '')
            return true;
        else
            return false;
    }

    /**
     * 清空console
     */
    clear() {
        console.clear()
    }

    /**
     * alert花式用法
     * 模块加载的时候需要赋值调用
     *
     */
    alert(layer) {
        layer.confirm('Df帅吗？', {
            btn: ['帅', '很帅'] //按钮
        }, function() {
            layer.msg('谢谢夸奖', {
                icon: 1
            }); //对应“/skin/default/icon.png”，从0开始排序，1代表图片里第二个图案
        }, function() {
            layer.confirm('荣幸之至！', {
                btn: ['客气了', '应该的']
            }, function() {
                layer.msg('呵呵', {
                    icon: 1
                });

            }, function() {
                layer.confirm('陪我聊会儿天吧', {
                    btn: ['好的', '不要']
                }, function() {
                    layer.msg('加我QQ：573270407', {
                        icon: 1,
                        time: 60000, //30s后自动关闭
                        btn: ['ok']
                    });
                }, function() {

                    layer.msg('那就不好意思了', {
                        icon: 0
                    });
                    setTimeout(function() {
                        //					"Scripts may close only the windows that were opened by it" (脚本只能关闭它所打开的窗口)
                        //					window.opener = null;
                        //					window.open('', '_self');
                        //					window.close();
                        //					open(location, '_self').close();
                        hacker()
                    }, 1000)

                });

            });
        });
    }

    /**
     * var time = new Date().format("yyyy-MM-dd HH:mm:ss");
     * http://www.w3school.com.cn/jsref/jsref_obj_date.asp
     * 将date格式化
     * ok：本地时间格式；
     * date：日期；
     * time：时间；
     * full：日期加时间
     * date_list(Time,"ok")
     */
    dateList(v, x) {
        switch (x) {
            //toLocaleDateString按不同的国家设置不同的日期格式
            case "ok":
                var xx = new Date(parseInt(v.replace("/Date(", "").replace(")/", ""), 10)).toLocaleString();
                break;
            case "date":
                var xx = new Date(parseInt(v.replace("/Date(", "").replace(")/", ""), 10)).toLocaleDateString();
                break;
            case "time":
                var xx = new Date(parseInt(v.replace("/Date(", "").replace(")/", ""), 10)).toLocaleTimeString();
                break;
            case "full":
                var xx = new Date(parseInt(v.replace("/Date(", "").replace(")/", ""), 10)).toLocaleDateString() +
                    new Date(parseInt(v.replace("/Date(", "").replace(")/", ""), 10)).toLocaleTimeString();
                break;
            default:
                var xx = "error";
        }
        return xx;
    }

    /**
     * 将date格式化，截取年月日
     *
     * date_list(Time,"y")
     */
    dateListC(v, x) {
        switch (x) {
            case 'y':
                var xx = new Date(parseInt(v.replace("/Date(", "").replace(")/", ""), 10)).getFullYear();
                break;
            case 'm':
                var xx = new Date(parseInt(v.replace("/Date(", "").replace(")/", ""), 10)).getMonth() + 1;
                break;
            case 'd':
                var xx = new Date(parseInt(v.replace("/Date(", "").replace(")/", ""), 10)).getDate();
                break;
        }
        return xx;
    }

    /**
     * 获取当前时间，返回一个对象或者一个时间字符串
     * @param {Object} isObj
     */
    datetimeNow(isObj) {
        var d = new Date();
        var timeN = {
            Year: d.getFullYear(), //获取当前年份
            Month: d.getMonth() + 1, //获取当前月份（0——11）
            Day: d.getDate(),
            Hour: d.getHours(),
            Minute: d.getMinutes(),
            Second: d.getSeconds()
        }
        if (isObj)
            return timeN;
        else //自动填充为国际规范的时间格式
            return timeN.Year + '-' + (timeN.Month < 10 ? "0" + timeN.Month : timeN.Month) + '-' + (timeN.Day < 10 ?
                "0" + timeN.Day : timeN.Day) + '-' + (timeN.Hour < 10 ? "0" + timeN.Hour : timeN.Hour) + '-' + (
                timeN.Minute < 10 ? "0" + timeN.Minute : timeN.Minute) + '-' + (timeN.Second < 10 ? "0" + timeN
                .Second : timeN.Second)
    }

    /**
     * 获取date的年月日
     * 将长整型的时间转化为正常的时间格式
     * date_list(1489737842131, "ok")
     */
    dateFromLong(v, x) {
        switch (x) {
            case 'y':
                var xx = new Date(v).getFullYear();
                break;
            case 'm':
                var xx = new Date(v).getMonth() + 1;
                break;
            case 'd':
                var xx = new Date(v).getDate();
                break;
            case 'ok':
                var xx = new Date(v).getFullYear() + "年" + (new Date(v).getMonth() + 1) + "月" + new Date(v)
                    .getDate() +
                    "日";
                break;
            default:
                var xx = new Date(v).toLocaleString();
                break; //完整的时间
        }
        return xx;
    }

    /**
     * 将纯数字的时间转化为正常的时间格式
     * toZhYmdhms("20170317145726");
     *
     */
    toZhYmdhms(v) {
        var year = v.substring(0, 4);
        var month = v.substring(4, 2);
        var day = v.substring(6, 2);
        var h = v.substring(8, 2);
        var m = v.substring(10, 2);
        var s = v.substring(12, 2);
        return year + "年" + month + "月" + day + "日" + h + "时" + m + "分" + s + "秒";
    }

    /**
     * 判断是否为空或null
     * @param {Object} val
     */
    isNullOrEmpty(val) {
        if (val == null || val == "")
            return true;
        else
            return false;
    }

    /**
     * 判断是否是数字
     * @param {Object} val
     */
    isNum(val) {
        if (!isNaN(val)) { //判断数字
            alert("是数字");
        } else {
            alert("不是数字");
        }
    }

    /**
     * 将json字符串转化为json对象
     */
    strToJson(str) {
        return JSON.parse(str);
    }



    /**
     * 弹窗确定事件
     * @param {Object} str
     * @param {Object} action
     */
    tc(str, action) {
        alert(str, action());
    }

    /**
     * 查找字符
     */
    findStr(str, 查找的字符) {
        return str.indexOf(查找的字符);
    }

    /**
     * 将字符串分割，并循环分割的每一个部分，执行函数
     * var str="";
     * strSplitRun(value, "|", function (x) { str += SplitStr(x, ",", -3) + "/"; });
     * @param {Object} x
     */
    strSplitRun(str, 分隔符, 函数) {
        data = str.split(分隔符);
        for (var i = 0; i < data.length; i++) {
            函数(data[i]);
        }
    }

    splitStr(theString, 分隔符, 位置) {
        arr = theString.split(分隔符);
        if (位置 < 0)
            return arr[arr.length + 位置];
        return arr[位置];
    }

    /**
     * 替换字符串尾部指定数目的字符
     * 用来隐藏手机号的后几位，粗略保护会员隐私，技术党F12搜索函数名下断点可以获得完整手机号
     * @param {Object} value
     */
    hideStr(value) {
        if (value.length > 10)
            value = value.substring(0, value.length - 3) + "***";
        return value;
    }



    /**
     * 延迟半秒关闭当前qui弹窗
     */
    closeW(是否延迟) {
        if (是否延迟)
            setTimeout("top.Dialog.close()", 500);
        else
            top.Dialog.close();
    }

    /**
     * 输出某种颜色的字符串到控制台
     * 可以设置颜色、大小
     * 例如：
     * log("df","red",25)   单条字符串
     * log("df",['red','orange'],25)    单条字符串设置填充、边框色
     * log(["df","fd"],["red","green"],25);     单条字符串用多种颜色拼接
     * @param {Object} text 字符串
     * @param {Object} color    颜色
     * @param {Object} size 
     */
    log(text, color = undefined, size = 15) {
        var t = "";
        var c = [];
        //多条数据根据颜色、尺寸输出
        if ((text instanceof Array) && (color instanceof Array)) {
            for (var i = 0; i < text.length; i++) {
                t += `%c ${text[i]}`;
            }
            c.push(t);
            for (var i = 0; i < text.length; i++) {
                if (typeof(color[i]) != "undefined")
                    c.push(`color:${color[i]};font-size:${size}px;`);
                else
                    c.push(`color:#000000;font-size:${size}px;`);
            }
            // console.log(c);
            console.log.apply(console, c);
        }
        //单条数据根据颜色、尺寸输出
        else if (color != undefined) {
            if (color instanceof Array) {
                // 填充色和边框
                console.log(`%c ${text}`,
                    `font-size:${size}px;-webkit-text-fill-color:${color[0]};-webkit-text-stroke: .5px ${color[1]};`
                );

            } else {
                console.log(`%c ${text}`, `font-size:${size}px;color:${color}`);
            }
        }
        //普通输出
        else
            console.log(`%c ${text}`, `font-size:${size}px;`);
    }

    /**
     * 加减乘除
     *
     * JJCC([2222,2,20],"+")   //JJCC([2222,2,20])
     */
    jjcc(num, style) {
        if (style == undefined)
            style = "+";
        var n;
        if (num instanceof Array) {
            if (num.length <= 1)
                return parseInt(num[0]);
            else {
                switch (style) {
                    case "+":
                        n = 0;
                        for (var i = 0; i < num.length; i++) {
                            n += parseInt(num[i]);
                        };
                        return n;
                    case "-":
                        n = parseInt(num[0]);
                        for (var i = 1; i < num.length; i++) {
                            n -= num[i];
                        };
                        return n;
                    case "*":
                        n = 1;
                        for (var i = 0; i < num.length; i++) {
                            n *= num[i];
                        };
                        return n;

                    case "/":
                        n = parseInt(num[0]);
                        for (var i = 1; i < num.length; i++) {
                            n /= num[i];
                        };
                        return n;
                    default:
                }
            }
        } else return parseInt(num);
    }

    /**
     * 函数动态获取参数
     */
    argTest() {
        var i, s, numargs = arguments.length;
        s = numargs;
        if (numargs < 2)
            s += " argument was passed to ArgTest. It was ";
        else
            s += " arguments were passed to ArgTest. They were ";
        for (i = 0; i < numargs; i++) {
            s += arguments[i] + " ";
        }
        return (s);
    }

    runFrameFunctionByName(FrameName, action) {
        window.frames[FrameName].action(); //通过框架name调用框架内的函数

    }

    runParentFrameFunction(action) {
        parent.window.action(); //子页面调用父页面的函数
    }

    runPaOfParentFrameFunction(action) {
        window.parent.parent.window.action(); //调用上上级页面的函数
    }

    /**
     * 截取指定位置的字符串
     * SplitStr(value, ",", -1);
     */
    splitStr(theString, 分隔符, 位置) {
        arr = theString.split(分隔符);
        if (位置 < 0)
            return arr[arr.length + 位置];
        return arr[位置];
    }

    /**
     * 查找字符
     */
    findStr(str, 查找的字符) {
        return str.indexOf(查找的字符);
    }

    /**
     * 将字符串分割，并循环分割的每一个部分，将各个分割到的字符作为参数传递给函数并执行
     * var str="";
     * StrSplitRun(value, "|", function (x) { str += SplitStr(x, ",", -3) + "/"; });
     * @param {Object} x
     */
    strSplitRun(str, 分隔符, 函数) {
        data = str.split(分隔符);
        for (var i = 0; i < data.length; i++) {
            函数(data[i]);
        }
    }

    /**
     * 关闭当前网页
     */
    closePage() {
        window.close();
    }

    /**
     * 判断是否使用了f12（浏览器调试工具）
     */
    isUseF12(func = function() {}, para1, para2) {
        document.onkeydown = document.onkeyup = document.onkeypress = function() {
            //		console.log('onkeydown', window.event.keyCode);
            if (window.event.keyCode == 123) {
                func(para1, para2)
                window.event.returnValue = false;
                return (false);
            }
        }
    }

    /**
     * 屏蔽网页里的鼠标右键
     */
    disableRightMouseKey() {
        document.onmousedown = function(e) {
            var msg = "欢迎光临寒舍，有什么需要帮忙的话，请与站长联系！谢谢您的合作！！！";
            //		console.log('onmousedown', event.button)
            if (event.button == 2 || event.button == 3) {
                if (typeof layer != 'undefined')
                    layer.msg(msg);
                else
                    alert(msg);
                document.oncontextmenu = new Function("return false;")
            }
        };

    }

    refresh() {
        location.reload();
    }


    // ##################################### 文本编辑框 START ######################################

    /**
     * <script src="/js/ueditor/ueditor.config.js"></script>
     * <script src="/js/ueditor/ueditor.all.js"></script>
     * <script name="text" id="bmaEditor" type="text/plain">
     * @Html.Raw(Model.text)
     * </script>
     */
    ueditor() {
        UE.Editor.prototype._bkGetActionUrl = UE.Editor.prototype.getActionUrl;
        UE.Editor.prototype.getActionUrl = function(action) {
            if (action == "config") {
                return "/Tools.ashx?operation=ueconfig";
            } else {
                return "/Tools.ashx?operation=uploadstoredescription";
            }
        }
        UE.getEditor('bmaEditor');
    }

    // ######################################  文本编辑框 END  ######################################


    /**
     * 带抉择的弹窗
     */
    tcChoice(弹窗内容, 触发函数) {
        top.Dialog.confirm(弹窗内容, 触发函数); //不要用“触发函数()”
    }



    /**
     * 调用计时器
     * timer(function(){alert(123);}, 3, true); //循环
     * timer(function(){alert(123);}, 3);//不循环
     */
    timer(action, second, Loop) {
        var Id;
        if (Loop)
            Id = setInterval(action(), second * 1000); //在指定的间隔重复执行指定函数，不考虑函数是否执行完
        else
            Id = setTimeout(action(), second * 1000); //在指定的间隔执行一次指定函数，会在函数执行完成之后继续下面的操作
        return Id;
    }

    /**
     * 清除计时器
     * @param {Object} id
     * @param {Object} loop
     */
    clearTimer(id, loop) {
        if (loop)
            clearInterval(id); //停止timer
        else
            clearTimeout(id);
    }


    // ###################################### cookie START ######################################

    getCookie(name) {
        var arr, reg = new RegExp("(^| )" + name + "=([^;]*)(;|$)");
        if (arr = document.cookie.match(reg))
            return unescape(arr[2]);
        else
            return null;
    }

    /**
     * setCookie("na",1,-1)表示删除
     * @param {Object} c_name
     * @param {Object} value
     * @param {Object} expiredays
     */
    setCookie(c_name, value, expiredays) {
        if (expiredays == undefined)
            expiredays = 1; //默认保存一天
        var exdate = new Date()
        exdate.setDate(exdate.getDate() + expiredays)
        document.cookie = c_name + "=" + escape(value) +
            ((expiredays == null) ? "" : ";expires=" + exdate.toGMTString()) + "; path=/"; //“ path=/”定义全局cookie
    }

    getAllCookie() {
        var strCookie = document.cookie; //这将获得该域名下的所有cookie。
        return strCookie;
    }

    /**
     * 删除cookie
     * @param {Object} name
     */
    delCookie(name) {
        setCookie(name, "", -1);
    }
    // ######################################  cookie END  ######################################

    /**
     * 添加收藏夹
     * @param {Object} url
     * @param {Object} text
     */
    addFavorite(url, text) {
        if (document.all) {
            window.external.addFavorite(url, text);
        } else if (window.sidebar) {
            window.sidebar.addPanel(text, url, "");
        }
    }

    /**
     * 设置首页
     * @param {Object} obj
     * @param {Object} vrl
     */
    setHomePage(obj, vrl) {
        if (confirm('确认要将' + vrl + '设置为首页?')) {
            try {
                obj.style.behavior = 'url(#default#homepage)';
                obj.setHomePage(vrl);
            } catch (e) {
                if (window.netscape) {
                    try {
                        netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
                    } catch (e) {
                        alert(
                            "此操作被浏览器拒绝！\n请在浏览器地址栏填写“about:config”并回车\n然后将[signed.applets.codebase_principal_support]设置为'true'"
                        );
                    }
                    var prefs = Components.classes['@mozilla.org/preferences-service;1'].getService(Components
                        .interfaces.nsIPrefBranch);
                    prefs.setCharPref('browser.startup.homepage', vrl);
                }
            }
        }
    }

    /**
     * 判断是否属于未定义
     * @param {Object} variable
     */
    isUndefined(variable) {
        return typeof variable == 'undefined' ? true : false;
    }

    form(formid) {
        if (formid == null || formid == undefined) {
            return document.forms[0];
        } else {
            return document.forms[formid];
        }
    }

    openWindow(url) {
        var a = document.createElement("a");
        a.setAttribute("href", url);
        a.setAttribute("target", "_blank");
        a.setAttribute("id", "openwin");
        document.body.appendChild(a);
        a.click();
    }

    getElementsByName(name) {
        var ret = [];
        var elements = document.getElementsByTagName("input");

        for (var i = 0; i < elements.length; i++) {
            if (elements[i].name == name) {
                ret.push(elements[i]);
            }
        }
        return ret;
    }



    /**
     * 获取随机字符串
     * @param {Object} len 字符串长度
     */
    randomString(len) {
        len = len || 32;
        var chars = 'ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz123456789';
        var maxPos = chars.length;
        var pwd = '';
        for (var i = 0; i < len; i++) {
            pwd += chars.charAt(Math.floor(Math.random() * maxPos));
        }
        return pwd;
    }

    /**
     * 获取文件后缀
     * @param {Object} filename	文件名
     */
    getSuffix(filename) {
        var pos = filename.lastIndexOf('.')
        var suffix = ''
        if (pos != -1) {
            suffix = filename.substring(pos + 1)
        }
        return suffix;
    }

    /**
     * 生成随机文件名
     * @param {Object} filename 原始文件名
     */
    generateRandomFileName(filename) {
        var g_object_name = '';
        var suffix = this.getSuffix(filename)
        g_object_name = this.randomString(16) + "." + suffix
        return g_object_name;
    }


}